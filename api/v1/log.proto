syntax = 'proto3';

package log.v1;
option go_package="/api/v1";

// START: service
service log {
  rpc Produce(ProduceRequest) returns (ProduceResponse);
  rpc Consume(ConsumeRequest) returns (ConsumeResponse);
  rpc ProduceStream(stream ProduceRequest) returns (stream ProduceResponse);
  rpc ConsumeStream(ConsumeRequest) returns (stream ConsumeResponse);
  rpc GetServers(GetServersRequest) returns (GetServersResponse);
}
// END: service

// START: apis
message ProduceRequest {
  Record record = 1;
}

message ProduceResponse {
  uint64 Offset = 1;
}

message ConsumeRequest {
  uint64 Offset = 1;
}

message ConsumeResponse {
  Record record = 1;
}

message GetServersRequest {}

message GetServersResponse {
  repeated string servers = 1;
}
// END: apis

message Record {
  bytes Value = 1;
  uint64 Offset = 2;
  uint64 Term = 3;
  uint32 Type = 4;
}


message Server {
  string Id = 1;
  string rpc_addr = 2;
  bool is_leader = 3;
}
